1.阿姆达尔定律
一个程序（或者一个算法）可以按照是否可以被并行化分为下面两个部分：
可以被并行化的部分
不可以被并行化的部分
程序的可并行化部分可以通过使用更多的硬件（更多的线程或CPU）运行更快。对于不可并行化的部分，只能通过优化代码来达到提速的目的。因此，你可以通过优化不可并行化部分来提高你的程序的运行速度和并行能力。你可以对不可并行化在算法上做一点改动，如果有可能，你也可以把一些移到可并行化放的部分。
你可能不会再使用x N个CPU来获得x N的期望加速。


2.操作系统通过写时复制来优化子进程的使用效率。


3.分布式架构
1）MPP架构
大规模并行处理massively parallel processor
2）SMP架构

3）NUMA架构
