1.阿姆达尔定律
一个程序（或者一个算法）可以按照是否可以被并行化分为下面两个部分：
可以被并行化的部分
不可以被并行化的部分
程序的可并行化部分可以通过使用更多的硬件（更多的线程或CPU）运行更快。对于不可并行化的部分，只能通过优化代码来达到提速的目的。因此，你可以通过优化不可并行化部分来提高你的程序的运行速度和并行能力。你可以对不可并行化在算法上做一点改动，如果有可能，你也可以把一些移到可并行化放的部分。
你可能不会再使用x N个CPU来获得x N的期望加速。


2.操作系统通过写时复制来优化子进程的使用效率。


3.分布式架构
1）MPP架构
大规模并行处理massively parallel processor
2）SMP架构

3）NUMA架构


4.布隆过滤器(Bloom Filter)
bloom算法类似一个hash set，用来判断某个元素（key）是否在某个集合中。
和一般的hash set不同的是，这个算法无需存储key的值，对于每个key，只需要k个比特位，每个存储一个标志，用来判断key是否在集合中。
算法：
1. 首先需要k个hash函数，每个函数可以把key散列成为1个整数
2. 初始化时，需要一个长度为n比特的数组，每个比特位初始化为0
3. 某个key加入集合时，用k个hash函数计算出k个散列值，并把数组中对应的比特位置为1
4. 判断某个key是否在集合时，用k个hash函数计算出k个散列值，并查询数组中对应的比特位，如果所有的比特位都是1，认为在集合中。
优点：不需要存储key，节省空间
缺点：
1. 算法判断key在集合中时，有一定的概率key其实不在集合中
2. 无法删除


5.




