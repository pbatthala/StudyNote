1.安装Android studio（需要先安装jdk）可以不安装android sdk
安装的时候会提示unable to access android sdk-on list，因为没有装android sdk，点击cancel即可，之后会安装。

2.主题更改
Preferences->Appearance&Behavior->Appearance->Theme

3.联机调试
连接数据线
确保数据处于开发者模式，并且允许usb调试
mac输入命令：system_profiler SPUSBDataType//查看是否有小米手机的信息

4.assets文件夹放在与java和res同等级的目录下，html放在assets中。

5.线性布局
<LinearLayout></LinearLayout>
<View />组件是所有组件的父组件
熟悉：
android:id组件id     
android:layout_width  200dp/match_parent 组件宽度   
android:layout_height   200dp/match_parent 组件高度
android:padding="80dp"   内边距
android:layout_margin="10dp" 外边距
 android:background="#ffff"  背景
android:layout_weight="1"    剩下宽度按权重分配

6.相对布局
<RelativeLayout>
android:layout_below="@id/view_1" 处于@id/view_1之下
android:layout_toRightOf="@id/view_1" 处于@id/view_1的右边

7.文本组件
<Button/>
<TextView />
android:text="tiange". 文本内容
android:textColor="#0f0fff"   颜色
android:textSize="12sp"       字体大小
下划线
需要Java代码实现
	mTextView = (TextView)findViewById(R.id.view_0);
        mTextView.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG);//中滑线
        mTextView.getPaint().setAntiAlias(true);
<EditText>文本输入框 类似<input>
android:inputType="number" 类似<input>的type
addTextChangedListener(new TextWatcher(){
	
})
<RadioButton>单选按钮
<RadioGroup>
   <RadioButton />
   <RadioButton />
   <RadioButton />
</RadioGroup>



8.页面跳转
//跳转到textview
                Intent intent = new Intent(MainActivity.this,TextViewActivity.class);
                startActivity(intent);



9.ANR
在Android上，如果你的应用程序有一段时间响应不够灵敏，系统会向用户显示一个对话框，这个对话框称作应用程序无响应（ANR：Application Not Responding）对话框。用户可以选择“等待”而让程序继续运行，也可以选择“强制关闭”。


10.声明网络权限
在AndroidManifet.xml中<application>上方添加
<uses-permission android:name="android.permission.INTERNET" />

11.添加glide的gradle依赖
在build.gradle(Module:app)中添加（同dependencies同等级）
repositories {
    mavenCentral()
    google()
}
在dependencies中最后添加
implementation 'com.github.bumptech.glide:glide:4.8.0'
annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'


11.android:scheme(ski:m)
作用：用户在访问我们的网页时，判断出这个用户手机上是否安装了我们的App，如果安装了则直接从网页上打开APP，否则就引导用户前往下载，从而形成一个推广上的闭环。
APP端配置
<activity
    android:name=".ui.activity.ZMCertTestActivity"
    android:label="@string/app_name"
    android:launchMode="singleTask"
    android:screenOrientation="portrait">
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data
            android:scheme="scheme1"
            android:host="host1"
            android:path="/path1"
            android:port="8080" />
    </intent-filter>
</activity>

1)WEB端通过调用scheme1://host1:8080/path1?query1=1&query2=true(如：window.location.href ="scheme1://host1:8080/path1?query1=1&query2=true(如：window.location.href",或使用<a href=""></a> )
，便能打开这个Activity。其中scheme和host是必须的，另外的看需求。

2)另一个APP打开
Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse("scheme1://host1:8080/path1?query1=1&query2=true"));
startActivity(intent);


12.WebView
<WebView
        android:id="@+id/webView"
        android:layout_width="match_parent"
        android:layout_height="200dp" />
MainActivity.java中:
	private WebView webView;
protected void onCreate()里写：
	webView = findViewById(R.id.webView);
        webView.loadUrl("file:///android_asset/index.html");
在java同级别目录下新建目录assets.
在assets中添加index.html

允许运行js的alert等方法：
webView= (WebView) findViewById(R.id.webview); 
webView.setWebChromeClient(new WebChromeClient()); 
webView.setWebViewClient(new WebViewClient()); 
webView.getSettings().setJavaScriptEnabled(true); 
webView.loadUrl(url);






