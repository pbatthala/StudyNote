1. Download:
https://portal.influxdata.com/downloads/
Offline package:
Mac OS:
https://dl.influxdata.com/influxdb/releases/influxdb-1.7.3_darwin_amd64.tar.gz
Windows:
https://dl.influxdata.com/influxdb/releases/influxdb-1.7.3_windows_amd64.zip
Linux 64:
https://dl.influxdata.com/influxdb/releases/influxdb-1.7.3_linux_amd64.tar.gz
Linux 32:
https://dl.influxdata.com/influxdb/releases/influxdb-1.7.3_linux_i386.tar.gz
Linux ARM:
https://dl.influxdata.com/influxdb/releases/influxdb-1.7.3_linux_armhf.tar.gz

2. Start
Installed through the package, you can use the following statement to start the server:
sudo service influxdb start
To download the binary package directly, start the server as follows:
Go to the usr/bin folder in the InfluxDB directory and execute:
./influxd
Start the client:
Execute under usr/bin
./influx
Configuration file: influxdb/etc/influxdb/influxdb.conf

Web interface
The new version uses Chronograf, the original web admin interface is gone.
Download Chronograf
https://portal.influxdata.com/downloads/
Unzip the operation. /usr/bin/chronograf

Telegraf is a data collector that collects all raw data, formats it and stores it in influxdb. Telegraf has a large number of data input, output and analysis plugins that collect monitoring data for components such as php-fpm, nginx, access log, mysql, redis. Telegraf is very scalable, and the open source community is very active. Developers from all over the world will continue to contribute new plugins.

Kapacitor is a tool that can subscribe to influxdb data or batch query data in real-time according to pre-written rules, and perform alarms (mail, SMS, log, exec, etc.). The official has designed a tickscript language for it, which makes it easy to write rule scripts.

Mac install telegraf:
brew install telegraf
Mac install kapacitor:
brew install kapacitor



3. Create an admin account password and give all database permissions
create
create user admin with password 'admin'
Empowerment
grant all privileges to admin
Modify user
set password for admin='admin'
delete
drop user admin
Revoke permission
revoke all on mydb from admin
View permissions
Show grants for admin

Open the certificate:
vi /etc/influxdb/influxdb.conf
Change the value of the auth-enabled option under the [http] tag to true
[http]  
enabled = true  
bind-address = ":8086"  
auth-enabled = true
log-enabled = true  

Command line CLI login
$ influx -username admin -password admin

Write data using the HTTP API:

Username password is written in the URL
curl -i -X POST "http://localhost:8086/write?db=mydb&u=admin&p=admin"




4. Basic concepts
Nouns in influxDB concepts in traditional databases
Database
The table in the measurement database
a row of data in the points table
Unique concept in InfluxDB
1）Point
A Point consists of a time, a field, and a tag.
Point is equivalent to a row of data in a traditional database, as shown in the following table:
Point attribute Concept in traditional database
Time each data record time, is the main index in the database (will be automatically generated)
Fields Various record values ​​(properties without indexes) are also recorded values: temperature, humidity
Tags Various indexed attributes: area, elevation 
2）series
All the data in the database needs to be displayed by the chart, and the series represents the data in the table, and can be drawn into several lines on the chart: calculated by the combination of the tags.


5. Basic operations
1) Display the database:
> show databases
2) New database:
> create database test
3) Delete the database
> drop database test
4) Use a database
> use test
5) Display all tables
> show measurements
6) New table
InfluxDB does not have an explicit statement for creating a new table. It can only create a new table by means of insert data.
insert test,id=1 v1=123,v2=1234
Test is the table name
Id=1 is tag
V1=123, v2=1234 is fields, separated by multiple tags commas
7) Delete the table
> drop measurement test
8) Increase data
Increase the data in the insert mode, note that in the InfluxDB insert, the table name and data are separated by a comma (,), the space between the tag and the field is separated by a comma between multiple tags or multiple fields ( ,) separated.
9) Query data
The query is the same as SQL
select * from test
10) Modify and delete data
InfluxDB is a time series database and does not provide a way to modify and delete data.
11) series operation
Series represents the data in this table, you can draw several lines on the chart, and the series is mainly calculated by the combination of tags.
show series from test



6.HTTP API
1) Establish a database
curl -POST http://localhost:8086/query --data-urlencode "q=CREATE DATABASE testdb"
2) Delete the database
curl -POST http://localhost:8086/query --data-urlencode "q=DROP DATABASE testdb"
3) Add data
InfluxDB adds data through the HTTP API mainly using the following format:
curl -i -XPOST 'http://localhost:8086/write?db=testdb' --data-binary 'cpu_load_short,host=server01,region=us-west value=0.64 1434055562000000000'
4) InfluxDB adds multiple pieces of data via HTTP API
InfluxDB adds multiple pieces of data through the HTTP API similar to adding a single piece of data. Examples are as follows:
curl -i -XPOST 'http://localhost:8086/write?db=testdb' --data-binary 'cpu_load_short,host=server02 value=0.67
cpu_load_short,host=server02,region=us-west value=0.55 1422568543702900257
cpu_load_short,direction=in,host=server01,region=us-west value=2.0 1422568543702900257'



7. Strategy
1) View database policy
show retention policies on test
Name--name, this example name is default
Duration--duration, 0 means unlimited
shardGroupDuration--shardGroup storage time, shardGroup is a basic storage structure of InfluxDB, data should be greater than this time should be reduced in query efficiency.
replicaN--full name is REPLICATION, the number of copies
Default--is it the default policy?
2) New strategy
create retention policy "2_hours" on "test" duration 2h replication 1 default 
Added a 2-hour strategy to the test library.
The strategy name is called 2_hours,
Duration is saved for 2 hours, data before 2 hours will be deleted, h (hours), w (weeks), d (days)
The copy of replication is 1,
Default is set to the default policy.
3) Modify the strategy
alter retention policy "rp_name" on db_name" duration 3w default



8. Continuous query
When the data exceeds the time specified in the save policy, it will be deleted. If we don't want to completely delete it, for example, do a statistical sampling of data: save the original data per second as hourly data, so that the space occupied by the data is greatly reduced (at the cost of reducing accuracy). This requires InfluxDB to provide: Continuous Queries.
View current query strategy
show continuous queries

Create Continuous Queries
Create continuous query cq_30m on testDB begin select mean(temperature) into weather30m from weather group by time(30m) end
The notes are as follows:
Cq_30m: the name of the continuous query
testDB: specific database name
Mean(temperature): calculate the average temperature
Weather: current table name
Weather30m: table name for storing new data
30m: time interval is 30 minutes
When we insert new data, we find it through the SHOW MEASUREMENTS query. You can find that there is one more in the database called weather30m (there is already calculated data in it). This is all done automatically by Continuous Queries.

Delete Continuous Queries
Drop continuous query <policy name> on <database_name>



9. Aggregate query
count()   
Returns the number of non-null values ​​in a (field) field.
select count(v1) from test
V1 is the fields 
distinct()   
Returns a unique value for a field.
select distinct(v1) from test
mean()   
Returns the arithmetic mean (average) of the values ​​in a field. The field type must be a long integer or float64.
median()  
Returns the median (median) from the sorted value in a single field. The type of the field value must be either a long integer or a float64 format.
spread() 
Returns the difference between the minimum and maximum values ​​of the field. The type of data must be long or float64.
sum()
Returns the sum of all the values ​​in a field. The type of the field must be a long integer or float64.
top()
Returns the largest N values ​​in a field. The field type must be a long integer or a float64 type.
select top(v1,3) from test
Returns the three largest values ​​in the test field in the table.
Bottom() function
Role: Returns the smallest N values ​​in a field. The field type must be a long integer or a float64 type.
First() function
Returns the oldest value in a field.
Last() function
Returns the most recent value in a field.
Max() function
Returns the maximum value in a field. This field type must be a long integer, float64, or boolean type.
Min() function
Returns the minimum value in a field. This field type must be a long integer, float64, or boolean type.
Percentile() function
Returns the percentage value of the sort value ranked as N. The type of the field must be a long integer or float64.
Derivative() function
Returns the rate of change of a field in a series.
Difference() function
Returns the difference between consecutive time values ​​in a field. The field type must be a long integer or float64.
Elapsed() function
Returns the difference between consecutive fields of a field. The interval unit is optional. The default is 1 nanosecond.
u (nanoseconds), ms (milliseconds), s (seconds), m (minutes), h (hours), d (days), w (weeks)
moving_average()函数
Returns a moving average of consecutive field values, the field type must be long integer or float64 type.
non_negative_derivative()函数
Returns the non-negative rate of change in value in a field in a series.
Stddev() function
Returns the standard deviation of the values ​​in a field. The type of the value must be a long integer or a float64 type.



10. Data backup
1) Backup metadata
Influxd backup <backup path>
The backed up database can be specified with the -database parameter.
You can use the -host parameter to remotely back up data. The port is usually 8088.
influxd backup -database mydatabase -host 10.0.0.1:8088 /tmp/mybackpath
2) Data recovery
influxd restore [ -metadir | -datadir ] <path-to-meta-or-data-directory> <path-to-backup>
Required parameters:
-metadir <recovered data path>
or
-datadir <path to backup data>
influxd restore -database telegraf -datadir /var/lib/influxdb/data /tmp/backup  



11. Management
List the statements being executed:
show queries
Stop statement:
kill query <qid>


12.influxdb-java
According to mevan:
	<dependency>
            <groupId>org.influxdb</groupId>
            <artifactId>influxdb-java</artifactId>
            <version>2.14</version>
        </dependency>
/**Connect to the timing database; get InfluxDB**/
    public InfluxDB influxDBBuild(){
        if(influxDB == null){
            influxDB = InfluxDBFactory.connect(url,username,password);
            influxDB.setDatabase(database);
        }

        return influxDB;
    }

/**
     * Insert
     * @param measurement 表
     * @param tags tag
     * @param fields field
     */
    public void insert(String measurement, Map<String, String> tags, Map<String, Object> fields){
        Point.Builder builder = Point.measurement(measurement);
        builder.tag(tags);
        builder.fields(fields);

        influxDB.write(database, "", builder.build());
    }

/**
     * Inquire
     * @param command query statement
     * @return
     */
    public QueryResult query(String command){
        return influxDB.query(new Query(command,database));
    }



















