1.虚拟技术对比
Vsphere
vmware的Vsphere是目前市场占有率最高的服务器虚拟化产品，功能强大，管理界面简单，可扩展。

XenServer
它是critix（思杰公司）公司推出的服务器虚拟化产品，能较好的实现对虚拟机资源的整合。有免费版。

Hyper-v
Hyper-V是微软的一款虚拟化产品，是微软第一个采用类似Vmware和Citrix开源Xen一样的基于hypervisor的技术。
Hyper-V可以很好地支持Linux，我们可以安装支持Xen的Linux内核，这样Linux就可以知道自己运行在 Hyper-V之上.
如果你的环境大多关于微软的产品，那么使用Hyper-V更合理，因为你的专业知识已经基于微软产品。


2.开源云计算
OpenNebula
Ceph数据存储驱动程序为OpenNebula用户提供了使用Ceph块设备作为其虚拟映像的可能性。

CloudStack
CloudStack是一个开源的具有高可用性及扩展性的云计算平台。目前CloudStack支持管理大部分主流的hypervisors，如 KVM，XenServer，VMware，Oracle VM，Xen等。同时CloudStack是一个开源云计算解决方案。可以加速高伸缩性的公共和私有云(IaaS)的部署、管理、配置。使用 CloudStack作为基础，数据中心操作者可以快速方便的通过现存基础架构创建云服务。

OpenStack



3.时序数据库
时序数据的写入：如何支持每秒钟上千万上亿数据点的写入。
时序数据的读取：如何支持在秒级对上亿数据的分组聚合运算。
成本敏感：由海量数据存储带来的是成本问题。如何更低成本的存储这些数据，将成为时序数据库需要解决的重中之重。
influxDB


4.Paxos协议
Paxos算法的前提假设是不存在拜占庭将军问题，即：信道是安全的（信道可靠），发出的信号不会被篡改，因为Paxos算法是基于消息传递的。
对于一般的开发人员来说，只需要知道paxos是一个分布式选举算法即可。
Paxos算法中，有三种角色：
    Proposer 提出提案
    Acceptor 可以接受(accept)提案
    Learners 只能"学习"被批准的提案
在具体的实现中，一个进程可能同时充当多种角色。比如一个进程可能既是Proposer又是Acceptor又是Learner。
算法(决议的提出与批准)主要分为两个阶段:
1. prepare阶段： 
2. accept批准阶段（回复数量满足多数派就通过）

算法优化(fast paxos)：
Paxos算法在出现竞争的情况下，其收敛速度很慢，甚至可能出现活锁的情况，例如当有三个及三个以上的proposer在发送prepare请求后，
很难有一个proposer收到半数以上的回复而不断地执行第一阶段的协议。因此，为了避免竞争，加快收敛的速度，
在算法中引入了一个Leader这个角色，在正常情况下同时应该最多只能有一个参与者扮演Leader角色，而其它的参与者则扮演Acceptor的角色，同时所有的人又都扮演Learner的角色。



5.活锁
活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败。 
活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的“活”， 而处于死锁的实体表现为等待；活锁有可能自行解开，死锁则不能。



6.比特币解决拜占庭将军问题
拜占庭将军问题的提出时间是1982年，直到2009年，比特币的出现才算解决了这一问题。
POW（proof of work）工作量证明：
工作量证明系统主要特征是众多参与节点需要做一定难度的工作得出一个结果，谁先得出立即全网广播，其他节点很容易通过结果来检查出之前节点是不是做了相应的工作，一旦结果被证明正确，
其他节点会把之前节点的结果添加到各自的账单中，为争取下一笔的交易记录做好计算的准备。



7.ACL权限
UGO权限管理的基础上为文件系统提供一个额外的、更灵活的权限管理机制。它被设计为UNIX文件权限管理的一个补充。ACL允许你给任何的用户或用户组设置任何文件/目录的访问权限。



8.Zookeeper协议
Zookeeper作为Hadoop和Hbase的重要组件，可以为分布式应用程序协调服务，同时还能使用Java和C的接口。

ZooKeeper提供的常见服务如下 :
    命名服务 - 按名称标识集群中的节点。它类似于DNS，但仅对于节点。
    配置管理 - 加入节点的最近的和最新的系统配置信息。
    集群管理 - 实时地在集群和节点状态中加入/离开节点。
    选举算法 - 选举一个节点作为协调目的的leader。
    锁定和同步服务 - 在修改数据的同时锁定数据。此机制可帮助你在连接其他分布式应用程序（如Apache HBase）时进行自动故障恢复。
    高度可靠的数据注册表 - 即使在一个或几个节点关闭时也可以获得数据。
	
角色：
	Leader 角色
	    Leader 服务器是整个 zookeeper 集群的核心，主要的工作 任务有两项 
        1. 事物请求的唯一调度和处理者，保证集群事物处理的顺 序性 
        2. 集群内部各服务器的调度者
	Follower 角色
	    1. 处理客户端非事物请求、转发事物请求给leader 服务器
        2. 参与事物请求 Proposal 的投票（需要半数以上服务器 通过才能通知 leadercommit 数据; Leader 发起的提案，要求 Follower 投票）
        3. 参与 Leader 选举的投票
	Observer 角色
		该角色充当了观察者的角色。观察 zookeeper 集群中的最新状态变化并将这些状态变化同步到 observer 服务器上。
		Observer 的工作原理与 follower 角色基本一致，而它和 follower 角色唯一的不同在于 observer 不参与任何形式的投票，包括事物请求 Proposal的投票和leader选举的投票。

Zab协议,ab协议的全称是 Zookeeper Atomic Broadcast （Zookeeper原子广播）。
Zookeeper 是通过 Zab 协议来保证分布式事务的最终一致性。
Zab协议是为分布式协调服务Zookeeper专门设计的一种 支持崩溃恢复 的 原子广播协议，
是Zookeeper保证数据一致性的核心算法。Zab借鉴了Paxos算法，但又不像Paxos那样，是一种通用的分布式一致性算法。

ZooKeeper API提供同步和异步方法	
Watcher机制:目的是为ZK客户端操作提供一种类似于异步获得数据的操作.
Zookeeper的watcher机制分成两大类型：defaultWatcher 和非defaultWatcher



9.二阶段提交 2PC（Two-phaseCommit）





