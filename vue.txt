1.vuetify
安装vue-cli:npm install @vue/cli -g
创建项目：vue create my-app
添加vuetify:  cd my-app;   vue add vuetify

2.自定义配置，需要在项目的 根目录添加一个Vue.config.js
修改vue-cli资源无法正常加载的问题:
vue.config.js中添
module.exports = {
    // 基本路径
    baseUrl: './',
    // 生产环境是否生成 sourceMap 文件
    productionSourceMap: false,
    // 服务器端口号
    // devServer: {
    //     port: 1234,
    // },
}

3.No ESLint configuration found
./node_modules/.bin/eslint --init(前提是先安装eslint：npm install eslint --save-dev)
使用上下键选择eslint的设置。
初始化后会出现.eslintrc.js的文件
module.exports = {
     .....
}

4.dev server使用http-proxy跨域调试
vue.config.js中设置
module.exports = {
    // webpack-dev-server的配置
    devServer: {
        //historyApiFallback: true,
        //hot: true,
        //inline: true,
        //progress: true,
        port: 8080,
        host: '127.0.0.1',
        proxy: {
            '/xs/*': {
                target: 'http://localhost:8889',
                changeOrigin: true,
                secure: false
            }
        }
    },
};

5.vuetify表格
hover的样式
.theme--dark.v-table tbody tr:hover td{
    background: aqua;
    font-weight: bolder;
    color: #ffaf5e;
  }
表格背景：
.zwj-table table.v-table{
    background-color: transparent;
  }


6.vue-cli
vue -V 查看版本
vue create hello-world创建项目
通过上下键选择需要的功能

7.vue-cli3 多页面
新建vue.config.js
// vue.config.js
module.exports = {
    baseUrl: './',
    pages:{
        index:{
            // page 的入口
            entry: 'src/index.js',
            // 模板来源
            template: 'public/index.html',
            // 在 dist/index.html 的输出
            filename: 'index.html',
            // 当使用 title 选项时，
            // template 中的 title 标签需要是 <title><%= htmlWebpackPlugin.options.title %></title>
            title: 'Index Page',
            // 在这个页面中包含的块，默认情况下会包含
            // 提取出来的通用 chunk 和 vendor chunk。
            chunks: ['chunk-vendors', 'chunk-common', 'index']
        },
        home:{
            entry: 'src/home.js',
            template:'public/home.html',
            filename: 'home.html',
            title: 'home Page',
            chunks: ['chunk-vendors', 'chunk-common', 'home']
        }
    }
}
//建议在开发时，新建一个src/pages目录统一管理，页面的 主js,模版html,主vue页面
多页面时访问非index.html页面直接http://localhost:8080/home.html


8.Save this as a preset for future projects? (y/N) N 默认选择 No ,表示不把现在的配置设置为本机的默认配置。


9.Linter/Formatter 支持代码风格检查和格式化。

10.socket.io
npm install vue-socket.io --save
在main.js中注册
import VueSocketio from 'vue-socket.io'
Vue.use(VueSocketio, 'http://xxx.xxx.com:2018');//这里的url是后台提供的socket的地址
组件中使用socket
new Vue({
    sockets: {
        connect: function () {
            console.log('socket connected')
        },
        customEmit: function (data) {
            console.log('this method was fired by the socket server. eg: io.emit("customEmit", data)')
        }
    },
    methods: {
        clickButton: function (data) {
            // $socket is socket.io-client instance
            this.$socket.emit('emit_method', data)
        }
    }
})
服务端：
ws.on('connection',(sock)=>{
  sock.on('a',(num1,num2)=>{
    console.log(`${num1},${num2}`)
  })
})

emit命令：
   a）命令可以只有一个名字
　　　　io.emit('自命名')
　　
　　b）命令可以除了名字还有数据
　　　　io.emit('自命名',a)
 
　　c）命令可以除了名字还有多个数据
　　　　io.emit('自命名',a，b，c，...，d)
 
　　d）命令可以除了名字还有回调函数
　　　　io.emit('自命名',data，function(a,b){ } )

on命令：
   a）命令可以只有一个名字
　　　　socket.on('自命名'，function(){ } )
　　
　　b）命令可以除了名字还有数据
　　　　socket.on('自命名',  function(data){  } )
 
　　c）命令可以除了名字还有多个数据
　　　　socket.on('自命名',  function(a,b,c,...,d){  } )
 
　　d）命令可以除了名字数据还有回调函数
　　　　socket.on('自命名',  function(data，fn){  fn(a,b);  })
on是监听某个地址，emit向地址发送数据


11.vue-resource
import VueResource from 'vue-resource'
Vue.use(VueResource)
	this.$http({
            url: '',
            method: 'POST',
            // 请求体重发送的数据
            data: {
                cat: 1
            },
            // 设置请求头
            headers: {
                'Content-Type': 'x-www-from-urlencoded'
            }
        }).then(function () {
            // 请求成功回调
        }, function () {
            // 请求失败回调
        });
vue-resource 提供的便捷方法：
get(url, [data], [options]);
post(url, [data], [options]);
put(url, [data], [options]);
patch(url, [data], [options]);
delete(url, [data], [options]);
jsonp(url, [data], [options]);
   this.$http.post(
    	'http://example.com', 
    	// 请求体重发送数据给服务端
    	{
        	cat: 1,
        	name: 'newBook'
    	},{
        	'headers': {
                'Content-Type': 'x-www-form-urlencoded'
        }
    	}).then(function () {
        	// 成功回调
    	}, function () {
        	// 失败回调
    	});


12.vuex
npm install vex
import Vuex from 'vuex'
Vue.use(Vuex)
export default new Vuex.Store({
  state: {
      count:1
  },
  getters:{
        //到处都需要对count执行，某种操作时，将其写在getters中
	getCount(state){
		return state.count
	}
  },
  mutations: {
      //同步函数
      increment(){
          this.state.count++
      }
  },
  actions: {
      //异步函数处理
      incrementAsync ({ commit }) {
          setTimeout(() => {
              commit('increment')
          }, 1000)
      }
  }
})
在组件使用：this.$store.state.count访问count
调用increment函数：this.$store.commit("increment")
调用incrementAsync函数：this.$store.dispatch("incrementAsync")
调用getCount函数：this.$store.getters.getCount


使用mapState，mapGetters，mapActions
import {mapState,mapGetters,mapActions} from 'vuex'; 
...mapState({//对象展开运算符
    // ...
})






